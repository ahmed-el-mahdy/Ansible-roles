ü§ñ Ansible Automation Project
Welcome to the Ansible Automation Project! This repository is a toolkit of Ansible playbooks and roles designed for efficient and reliable infrastructure and application deployment. The structure is built to be modular, durable, and easy to maintain.

üìÅ Directory Structure
The project is organized following best practices for Ansible projects:

playbook.yml: Your master playbook that orchestrates all the roles for a complete deployment.

inventory.yml: The central file where you define your target servers, grouped by their purpose.

roles/: This is the heart of the project. Each folder inside is a self-contained, reusable role.

tasks/main.yml: Contains all the tasks required to configure and manage a specific service.

handlers/main.yml: Holds the handlers that react to changes and restart services as needed.

vars/vault.yml: A highly secure, encrypted file for storing sensitive data like passwords and API keys.

templates/: A home for your templated configuration files (.j2).

üöÄ Get Started
1. Configure the Inventory
First, edit the inventory.yml file to list the servers you'll be working with. You can organize them into logical groups.

[my_webservers]
web1.example.com
web2.example.com

[my_databases]
db1.example.com

2. Manage Your Secrets
Security is a top priority. Sensitive data is kept safe using Ansible Vault.

To create a new vault file for a specific role:

ansible-vault create roles/your_role_name/vars/vault.yml

To edit a vault file and update your secrets:

ansible-vault edit roles/your_role_name/vars/vault.yml

3. Run the Playbook
Ready to deploy? Execute your playbook with this command. The --ask-vault-pass flag is essential for decrypting your secrets.

ansible-playbook -i inventory.yml playbook.yml --ask-vault-pass

This will automatically execute every role defined in your playbook, ensuring a smooth and consistent deployment.

Feel free to add more roles to expand your automation capabilities!